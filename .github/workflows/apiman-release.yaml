jobs:
  publish-docker-images:
    needs:
    - release
    secrets: inherit
    uses: apiman/apiman/.github/workflows/docker-test-release.yml@master
    with:
      apiman-version: ${{ inputs.release-version }}
      push-to-repos: true
      snapshot: ${{ inputs.prerelease == 'true' }}
  release:
    env:
      DEV_VERSION: ${{ inputs.snapshot-version }}
      RELEASE_BRANCH: ${{ inputs.branch }}
      RELEASE_VERSION: ${{ inputs.release-version }}
    if: github.repository_owner == 'Apiman'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Initial Git setup
      run: 'git config --global user.name "apiman-ci"

        git config --global user.email "ci.apiman@gmail.com"

        '
    - continue-on-error: true
      name: Check out Apiman
      uses: actions/checkout@v3
      with:
        lfs: true
        ref: ${{ env.RELEASE_BRANCH }}
        repository: apiman/apiman
        token: ${{ secrets.ACCESS_TOKEN }}
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        java-version: '11'
        server-id: ossrh
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      name: Git GPG key setup (keys imported in setup/java)
      run: 'bash .github/workflows/support/set-up-gpg.sh

        '
    - continue-on-error: true
      name: Update Apiman *Parent* Release Version ${{ env.RELEASE_VERSION }} in pom.xml
      run: 'cd parent

        mvn -ntp clean install

        mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false
        -DprocessAllModules=true

        mvn -ntp clean install

        '
    - continue-on-error: true
      name: Update Apiman Release Version ${{ env.RELEASE_VERSION }} in pom.xml
      run: 'mvn -ntp -N versions:update-parent -DparentVersion="[$RELEASE_VERSION]"
        -DgenerateBackupPoms=false

        mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false
        -DprocessAllModules=true

        mvn -ntp clean install

        '
    - continue-on-error: true
      name: Update Apiman Version in Plugins Project
      run: 'cd plugins

        sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>$RELEASE_VERSION<\/version.apiman>/g"
        pom.xml

        '
    - continue-on-error: true
      name: Commit & push changes for Apiman ${{ env.RELEASE_VERSION }}
      run: "git add .\ngit commit -m \"Automated commit for Release Version: $RELEASE_VERSION\"\
        \ngit tag -f -a -m \"Tagging release $RELEASE_VERSION\" $RELEASE_VERSION\n\
        git push --atomic origin master $RELEASE_VERSION   \n"
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      name: Collecting and signing release assets
      run: 'mkdir -p /tmp/releases

        cp containers/docker-compose/target/apiman-docker-compose-$RELEASE_VERSION.zip
        /tmp/releases/

        cp distro/wildfly/target/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip
        /tmp/releases/

        cp distro/vertx/target/apiman-distro-vertx-$RELEASE_VERSION.zip /tmp/releases/

        cp distro/tomcat/target/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip
        /tmp/releases/

        cp api-catalog/catalog.json /tmp/releases/apiman-api-catalog.json

        cp plugins/plugin-registry/target/classes/registry.json /tmp/releases/apiman-plugin-registry.json

        find /tmp/releases -name "*" -exec gpg --batch --passphrase "$GPG_PASSPHRASE"
        --armor --detach-sign {} \;

        '
    - continue-on-error: true
      name: "Prepare Asciidoc \u27A1 MarkDown for GH Release"
      run: 'npm install --global downdoc

        npx downdoc CHANGELOG.adoc -o /tmp/CHANGELOG.md

        '
    - continue-on-error: true
      id: create_release
      name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: /tmp/CHANGELOG.md
        files: '/tmp/releases/*

          '
        name: ${{ inputs.release-version }}
        prerelease: ${{ inputs.prerelease }}
        tag_name: ${{ inputs.release-version }}
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      name: Deploy Apiman to Maven Central
      uses: nick-fields/retry@v2
      with:
        command: 'cd parent

          mvn deploy -B -DskipTests -Prelease


          cd ${{ github.workspace }}

          mvn deploy -B -DskipTests -Prelease

          '
        max_attempts: 3
        retry_on: any
        timeout_minutes: 30
    - continue-on-error: true
      name: Update Apiman Parent Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
      run: 'cd parent

        mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false
        -DprocessAllModules=true

        mvn install

        '
    - continue-on-error: true
      name: Update Apiman Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
      run: 'mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false
        -DprocessAllModules=true

        mvn -ntp versions:update-parent -DgenerateBackupPoms=false -DallowSnapshots=true
        -DparentVersion="[$DEV_VERSION]"

        cd plugins

        sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>$DEV_VERSION<\/version.apiman>/g"
        pom.xml

        '
    - continue-on-error: true
      name: Commit Changes for Apiman Next Snapshot Version ${{ env.DEV_VERSION }}
      run: 'git commit -am "Automated commit for Next Snapshot Version: $DEV_VERSION"

        git push origin --atomic HEAD:master

        '
name: Release Workflow
on:
  repository_dispatch:
    types: trigger-ga___apiman-release.yaml
